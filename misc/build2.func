# This function allows the user to configure advanced settings for the script.
advanced_settings() {
  whiptail --backtitle "Proxmox VE Helper Scripts" --msgbox --title "Here is an instructional tip:" "To make a selection, use the Spacebar." 8 58
  whiptail --backtitle "Proxmox VE Helper Scripts" --msgbox --title "Default distribution for $APP" "Default is: ${var_os} ${var_version} \n \nIf the default Linux distribution is not adhered to, script support will be discontinued. \n" 10 58
  if [ "$var_os" != "alpine" ]; then
    var_default_os="${var_os}"
    var_os=""
    while [ -z "$var_os" ]; do
      if [ "$var_default_os" == "debian" ]; then
        if var_os=$(whiptail --backtitle "Proxmox VE Helper Scripts" --title "DISTRIBUTION" --radiolist "Choose Distribution" 10 58 2 \
          "debian" "" ON \
          "ubuntu" "" OFF \
          3>&1 1>&2 2>&3); then
          if [ -n "$var_os" ]; then
            echo -e "${OS}${BOLD}${DGN}Operating System: ${BGN}$var_os${CL}"
          fi
        else
          exit_script
        fi
      fi
      if [ "$var_default_os" == "ubuntu" ]; then
        if var_os=$(whiptail --backtitle "Proxmox VE Helper Scripts" --title "DISTRIBUTION" --radiolist "Choose Distribution" 10 58 2 \
          "debian" "" OFF \
          "ubuntu" "" ON \
          3>&1 1>&2 2>&3); then
          if [ -n "$var_os" ]; then
            echo -e "${OS}${BOLD}${DGN}Operating System: ${BGN}$var_os${CL}"
          fi
        else
          exit_script
        fi
      fi
    done
  fi

  if [ "$var_os" == "debian" ]; then
    var_default_version="${var_version}"
    var_version=""
    while [ -z "$var_version" ]; do
      if [ "$var_default_version" == "11" ]; then
        if var_version=$(whiptail --backtitle "Proxmox VE Helper Scripts" --title "DEBIAN VERSION" --radiolist "Choose Version" 10 58 2 \
          "11" "Bullseye" ON \
          "12" "Bookworm" OFF \
          3>&1 1>&2 2>&3); then
          if [ -n "$var_version" ]; then
            echo -e "${OSVERSION}${BOLD}${DGN}Version: ${BGN}$var_version${CL}"
          fi
        else
          exit_script
        fi
      fi
      if [ "$var_default_version" == "12" ]; then
        if var_version=$(whiptail --backtitle "Proxmox VE Helper Scripts" --title "DEBIAN VERSION" --radiolist "Choose Version" 10 58 2 \
          "11" "Bullseye" OFF \
          "12" "Bookworm" ON \
          3>&1 1>&2 2>&3); then
          if [ -n "$var_version" ]; then
            echo -e "${OSVERSION}${BOLD}${DGN}Version: ${BGN}$var_version${CL}"
          fi
        else
          exit_script
        fi
      fi
    done
  fi

  if [ "$var_os" == "ubuntu" ]; then
    var_default_version="${var_version}"
    var_version=""
    while [ -z "$var_version" ]; do
      if [ "$var_default_version" == "20.04" ]; then
        if var_version=$(whiptail --backtitle "Proxmox VE Helper Scripts" --title "UBUNTU VERSION" --radiolist "Choose Version" 10 58 4 \
          "20.04" "Focal" ON \
          "22.04" "Jammy" OFF \
          "24.04" "Noble" OFF \
          "24.10" "Oracular" OFF \
          3>&1 1>&2 2>&3); then
          if [ -n "$var_version" ]; then
            echo -e "${OSVERSION}${BOLD}${DGN}Version: ${BGN}$var_version${CL}"
          fi
        else
          exit_script
        fi
      elif [ "$var_default_version" == "22.04" ]; then
        if var_version=$(whiptail --backtitle "Proxmox VE Helper Scripts" --title "UBUNTU VERSION" --radiolist "Choose Version" 10 58 4 \
          "20.04" "Focal" OFF \
          "22.04" "Jammy" ON \
          "24.04" "Noble" OFF \
          "24.10" "Oracular" OFF \
          3>&1 1>&2 2>&3); then
          if [ -n "$var_version" ]; then
            echo -e "${OSVERSION}${BOLD}${DGN}Version: ${BGN}$var_version${CL}"
          fi
        else
          exit_script
        fi
      elif [ "$var_default_version" == "24.04" ]; then
        if var_version=$(whiptail --backtitle "Proxmox VE Helper Scripts" --title "UBUNTU VERSION" --radiolist "Choose Version" 10 58 4 \
          "20.04" "Focal" OFF \
          "22.04" "Jammy" OFF \
          "24.04" "Noble" ON \
          "24.10" "Oracular" OFF \
          3>&1 1>&2 2>&3); then
          if [ -n "$var_version" ]; then
            echo -e "${OSVERSION}${BOLD}${DGN}Version: ${BGN}$var_version${CL}"
          fi
        else
          exit_script
        fi
      else
        if var_version=$(whiptail --backtitle "Proxmox VE Helper Scripts" --title "UBUNTU VERSION" --radiolist "Choose Version" 10 58 4 \
          "20.04" "Focal" OFF \
          "22.04" "Jammy" OFF \
          "24.04" "Noble" OFF \
          "24.10" "Oracular" ON \
          3>&1 1>&2 2>&3); then
          if [ -n "$var_version" ]; then
            echo -e "${OSVERSION}${BOLD}${DGN}Version: ${BGN}$var_version${CL}"
          fi
        else
          exit_script
        fi
      fi
    done
  fi
  # Setting Default Tag for Advanced Settings
  TAGS="community-script;${var_tags:-}"
  CT_DEFAULT_TYPE="${CT_TYPE}"
  CT_TYPE=""
  while [ -z "$CT_TYPE" ]; do
    if [ "$CT_DEFAULT_TYPE" == "1" ]; then
      if CT_TYPE=$(whiptail --backtitle "Proxmox VE Helper Scripts" --title "CONTAINER TYPE" --radiolist "Choose Type" 10 58 2 \
        "1" "Unprivileged" ON \
        "0" "Privileged" OFF \
        3>&1 1>&2 2>&3); then
        if [ -n "$CT_TYPE" ]; then
          CT_TYPE_DESC="Unprivileged"
          if [ "$CT_TYPE" -eq 0 ]; then
            CT_TYPE_DESC="Privileged"
          fi
          echo -e "${CONTAINERTYPE}${BOLD}${DGN}Container Type: ${BGN}$CT_TYPE_DESC${CL}"
        fi
      else
        exit_script
      fi
    fi
    if [ "$CT_DEFAULT_TYPE" == "0" ]; then
      if CT_TYPE=$(whiptail --backtitle "Proxmox VE Helper Scripts" --title "CONTAINER TYPE" --radiolist "Choose Type" 10 58 2 \
        "1" "Unprivileged" OFF \
        "0" "Privileged" ON \
        3>&1 1>&2 2>&3); then
        if [ -n "$CT_TYPE" ]; then
          CT_TYPE_DESC="Unprivileged"
          if [ "$CT_TYPE" -eq 0 ]; then
            CT_TYPE_DESC="Privileged"
          fi
          echo -e "${CONTAINERTYPE}${BOLD}${DGN}Container Type: ${BGN}$CT_TYPE_DESC${CL}"
        fi
      else
        exit_script
      fi
    fi
  done

  while true; do
    if PW1=$(whiptail --backtitle "Proxmox VE Helper Scripts" --passwordbox "\nSet Root Password (needed for root ssh access)" 9 58 --title "PASSWORD (leave blank for automatic login)" 3>&1 1>&2 2>&3); then
      if [[ ! -z "$PW1" ]]; then
        if [[ "$PW1" == *" "* ]]; then
          whiptail --msgbox "Password cannot contain spaces. Please try again." 8 58
        elif [ ${#PW1} -lt 5 ]; then
          whiptail --msgbox "Password must be at least 5 characters long. Please try again." 8 58
        else
          if PW2=$(whiptail --backtitle "Proxmox VE Helper Scripts" --passwordbox "\nVerify Root Password" 9 58 --title "PASSWORD VERIFICATION" 3>&1 1>&2 2>&3); then
            if [[ "$PW1" == "$PW2" ]]; then
              PW="-password $PW1"
              echo -e "${VERIFYPW}${BOLD}${DGN}Root Password: ${BGN}********${CL}"
              break
            else
              whiptail --msgbox "Passwords do not match. Please try again." 8 58
            fi
          else
            exit_script
          fi
        fi
      else
        PW1="Automatic Login"
        PW=""
        echo -e "${VERIFYPW}${BOLD}${DGN}Root Password: ${BGN}$PW1${CL}"
        break
      fi
    else
      exit_script
    fi
  done

  if CT_ID=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Set Container ID" 8 58 $NEXTID --title "CONTAINER ID" 3>&1 1>&2 2>&3); then
    if [ -z "$CT_ID" ]; then
      CT_ID="$NEXTID"
      echo -e "${CONTAINERID}${BOLD}${DGN}Container ID: ${BGN}$CT_ID${CL}"
    else
      echo -e "${CONTAINERID}${BOLD}${DGN}Container ID: ${BGN}$CT_ID${CL}"
    fi
  else
    exit
  fi

  if CT_NAME=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Set Hostname" 8 58 $NSAPP --title "HOSTNAME" 3>&1 1>&2 2>&3); then
    if [ -z "$CT_NAME" ]; then
      HN="$NSAPP"
    else
      HN=$(echo ${CT_NAME,,} | tr -d ' ')
    fi
    echo -e "${HOSTNAME}${BOLD}${DGN}Hostname: ${BGN}$HN${CL}"
  else
    exit_script
  fi

  if DISK_SIZE=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Set Disk Size in GB" 8 58 $var_disk --title "DISK SIZE" 3>&1 1>&2 2>&3); then
    if [ -z "$DISK_SIZE" ]; then
      DISK_SIZE="$var_disk"
      echo -e "${DISKSIZE}${BOLD}${DGN}Disk Size: ${BGN}${DISK_SIZE} GB${CL}"
    else
      if ! [[ $DISK_SIZE =~ $INTEGER ]]; then
        echo -e "{INFO}${HOLD}${RD} DISK SIZE MUST BE AN INTEGER NUMBER!${CL}"
        advanced_settings
      fi
      echo -e "${DISKSIZE}${BOLD}${DGN}Disk Size: ${BGN}${DISK_SIZE} GB${CL}"
    fi
  else
    exit_script
  fi

  if CORE_COUNT=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Allocate CPU Cores" 8 58 $var_cpu --title "CORE COUNT" 3>&1 1>&2 2>&3); then
    if [ -z "$CORE_COUNT" ]; then
      CORE_COUNT="$var_cpu"
      echo -e "${CPUCORE}${BOLD}${DGN}CPU Cores: ${BGN}$CORE_COUNT${CL}"
    else
      echo -e "${CPUCORE}${BOLD}${DGN}CPU Cores: ${BGN}$CORE_COUNT${CL}"
    fi
  else
    exit_script
  fi

  if RAM_SIZE=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Allocate RAM in MiB" 8 58 $var_ram --title "RAM" 3>&1 1>&2 2>&3); then
    if [ -z "$RAM_SIZE" ]; then
      RAM_SIZE="$var_ram"
      echo -e "${RAMSIZE}${BOLD}${DGN}RAM Size: ${BGN}${RAM_SIZE} MiB${CL}"
    else
      echo -e "${RAMSIZE}${BOLD}${DGN}RAM Size: ${BGN}${RAM_SIZE} MiB${CL}"
    fi
  else
    exit_script
  fi

  if BRG=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Set a Bridge" 8 58 vmbr0 --title "BRIDGE" 3>&1 1>&2 2>&3); then
    if [ -z "$BRG" ]; then
      BRG="vmbr0"
      echo -e "${BRIDGE}${BOLD}${DGN}Bridge: ${BGN}$BRG${CL}"
    else
      echo -e "${BRIDGE}${BOLD}${DGN}Bridge: ${BGN}$BRG${CL}"
    fi
  else
    exit_script
  fi

  while true; do
    NET=$(whiptail --backtitle "Proxmox VE Helper Scripts" --title "IP ADDRESS" --menu \
        "How would you like to assign the IP address?" 12 58 3 \
        "dhcp" "Use DHCP for automatic IP assignment" \
        "netbox" "Select from available Netbox prefixes" \
        "manual" "Enter a static IP address manually" 3>&1 1>&2 2>&3)
    
    exit_status=$?
    if [ $exit_status -eq 0 ]; then
      case "$NET" in
        "dhcp")
          NET="dhcp"
          echo -e "${NETWORK}${BOLD}${DGN}IP Address: ${BGN}$NET${CL}"
          break
          ;;
        "netbox")
          # Check if config file was sourced successfully
          if [ -z "$NBADDR" ] || [ -z "$NBTOKEN" ]; then
            whiptail --backtitle "Proxmox VE Helper Scripts" --msgbox "Netbox API credentials not found. Please check your config file." 8 58
            continue
          fi
          
          # Get available prefixes from Netbox
          PREFIXES_JSON=$(curl -s -X GET \
              -H "Authorization: Token $NBTOKEN" \
              -H "Content-Type: application/json" \
              -H "Accept: application/json; indent=4" \
              "$NBADDR/api/ipam/prefixes/")
          
          # Extract prefix information for display
          PREFIXES_COUNT=$(echo "$PREFIXES_JSON" | jq '.count')
          
          if [ "$PREFIXES_COUNT" -eq 0 ]; then
            whiptail --backtitle "Proxmox VE Helper Scripts" --msgbox "No prefixes found in Netbox. Please try another option." 8 58
            continue
          fi
          
          # Create menu options for prefixes
          PREFIX_OPTIONS=()
          for ((i=0; i<$PREFIXES_COUNT; i++)); do
            PREFIX_ID=$(echo "$PREFIXES_JSON" | jq -r ".results[$i].id")
            PREFIX=$(echo "$PREFIXES_JSON" | jq -r ".results[$i].prefix")
            DESCRIPTION=$(echo "$PREFIXES_JSON" | jq -r ".results[$i].description // \"\"")
            
            if [ -n "$DESCRIPTION" ]; then
              PREFIX_OPTIONS+=("$PREFIX_ID" "$PREFIX ($DESCRIPTION)")
            else
              PREFIX_OPTIONS+=("$PREFIX_ID" "$PREFIX")
            fi
          done
          
          # Display prefix selection menu
          NBPREFIX=$(whiptail --backtitle "Proxmox VE Helper Scripts" --title "NETBOX PREFIXES" \
              --menu "Select a prefix for IP assignment:" 16 78 8 \
              "${PREFIX_OPTIONS[@]}" 3>&1 1>&2 2>&3)
          
          if [ $? -ne 0 ]; then
            continue
          fi
          
          # Get available IP from the selected prefix
          IP_JSON=$(curl -s -X GET \
              -H "Authorization: Token $NBTOKEN" \
              -H "Content-Type: application/json" \
              -H "Accept: application/json; indent=4" \
              "$NBADDR/api/ipam/prefixes/$NBPREFIX/available-ips/?limit=1")
          
          NET=$(echo "$IP_JSON" | jq -r '.[0].address')
          
          if [ -z "$NET" ] || [ "$NET" == "null" ]; then
            whiptail --backtitle "Proxmox VE Helper Scripts" --msgbox "No available IPs found in the selected prefix. Please try another prefix." 8 58
            continue
          fi
          
          # Get prefix details for later use
          PREFIX_DETAILS=$(curl -s -X GET \
              -H "Authorization: Token $NBTOKEN" \
              -H "Content-Type: application/json" \
              -H "Accept: application/json; indent=4" \
              "$NBADDR/api/ipam/prefixes/$NBPREFIX/")
          
          # Set NETNAME based on prefix for later use
          DESCRIPTION=$(echo "$PREFIX_DETAILS" | jq -r '.description // ""')
          if [ -n "$DESCRIPTION" ]; then
            NETNAME=$(echo "$DESCRIPTION" | tr -d ' ' | tr '[:lower:]' '[:upper:]')
          else
            # Extract network part from prefix as fallback
            PREFIX_ONLY=$(echo "$PREFIX_DETAILS" | jq -r '.prefix')
            NETNAME=$(echo "$PREFIX_ONLY" | cut -d'/' -f1 | tr '.' '_')
          fi
          
          echo -e "${NETWORK}${BOLD}${DGN}IP Address: ${BGN}$NET${CL}"
          break
          ;;
        "manual")
          MANUAL_IP=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Enter a Static IPv4 CIDR Address (e.g., 192.168.1.100/24)" 8 58 --title "MANUAL IP ADDRESS" 3>&1 1>&2 2>&3)
          
          if [ $? -ne 0 ]; then
            continue
          fi
          
          if [[ "$MANUAL_IP" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$ ]]; then
            NET="$MANUAL_IP"
            NETNAME=""
            echo -e "${NETWORK}${BOLD}${DGN}IP Address: ${BGN}$NET${CL}"
            break
          else
            whiptail --backtitle "Proxmox VE Helper Scripts" --msgbox "$MANUAL_IP is an invalid IPv4 CIDR address. Please enter a valid IPv4 CIDR address." 8 58
          fi
          ;;
      esac
    else
      exit_script  
    fi
  done

  if [ "$NET" != "dhcp" ]; then
    # Check if we have Netbox prefix details and try to get gateway from custom fields
    if [ -n "$NBPREFIX" ] && [ -n "$PREFIX_DETAILS" ]; then
      # Try to get gateway from custom fields
      GATEWAY_INFO=$(echo "$PREFIX_DETAILS" | jq -r '.custom_fields.Gateways[0].address // ""')
      
      if [ -n "$GATEWAY_INFO" ] && [ "$GATEWAY_INFO" != "null" ]; then
        # Extract IP from CIDR notation if needed
        NETBOX_GATE=$(echo "$GATEWAY_INFO" | cut -d '/' -f 1)
        
        # Ask user to choose between Netbox gateway or manual entry
        GATEWAY_CHOICE=$(whiptail --backtitle "Proxmox VE Helper Scripts" --title "GATEWAY SELECTION" --menu \
          "Choose gateway option:" 12 58 2 \
          "netbox" "Use Netbox gateway: $NETBOX_GATE" \
          "manual" "Enter gateway manually" \
          3>&1 1>&2 2>&3)
        
        if [ $? -ne 0 ]; then
          exit_script
        fi
        
        if [ "$GATEWAY_CHOICE" == "netbox" ]; then
          GATE1="$NETBOX_GATE"
          GATE=",gw=$GATE1"
          echo -e "${GATEWAY}${BOLD}${DGN}Gateway IP Address: ${BGN}$GATE1${CL}"
        else
          # Manual gateway entry
          while true; do
            GATE1=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Enter gateway IP address" 8 58 --title "GATEWAY IP" 3>&1 1>&2 2>&3)
            if [ -z "$GATE1" ]; then
              whiptail --backtitle "Proxmox VE Helper Scripts" --msgbox "Gateway IP address cannot be empty for static IP configuration" 8 58
            elif [[ ! "$GATE1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
              whiptail --backtitle "Proxmox VE Helper Scripts" --msgbox "Invalid IP address format" 8 58
            else
              GATE=",gw=$GATE1"
              echo -e "${GATEWAY}${BOLD}${DGN}Gateway IP Address: ${BGN}$GATE1${CL}"
              break
            fi
          done
        fi
      else
        # No gateway in Netbox, ask for manual entry
        while true; do
          GATE1=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Enter gateway IP address" 8 58 --title "GATEWAY IP" 3>&1 1>&2 2>&3)
          if [ -z "$GATE1" ]; then
            whiptail --backtitle "Proxmox VE Helper Scripts" --msgbox "Gateway IP address cannot be empty for static IP configuration" 8 58
          elif [[ ! "$GATE1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
            whiptail --backtitle "Proxmox VE Helper Scripts" --msgbox "Invalid IP address format" 8 58
          else
            GATE=",gw=$GATE1"
            echo -e "${GATEWAY}${BOLD}${DGN}Gateway IP Address: ${BGN}$GATE1${CL}"
            break
          fi
        done
      fi
    else
      # No Netbox prefix details, ask for manual entry
      while true; do
        GATE1=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Enter gateway IP address" 8 58 --title "GATEWAY IP" 3>&1 1>&2 2>&3)
        if [ -z "$GATE1" ]; then
          whiptail --backtitle "Proxmox VE Helper Scripts" --msgbox "Gateway IP address cannot be empty for static IP configuration" 8 58
        elif [[ ! "$GATE1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
          whiptail --backtitle "Proxmox VE Helper Scripts" --msgbox "Invalid IP address format" 8 58
        else
          GATE=",gw=$GATE1"
          echo -e "${GATEWAY}${BOLD}${DGN}Gateway IP Address: ${BGN}$GATE1${CL}"
          break
        fi
      done
    fi
  else
    GATE=""
    echo -e "${GATEWAY}${BOLD}${DGN}Gateway IP Address: ${BGN}Default${CL}"
  fi

  if [ "$var_os" == "alpine" ]; then
    APT_CACHER=""
    APT_CACHER_IP=""
  else
    if APT_CACHER_IP=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Set APT-Cacher IP (leave blank for none)" 8 58 --title "APT-Cacher IP" 3>&1 1>&2 2>&3); then
      APT_CACHER="${APT_CACHER_IP:+yes}"
      echo -e "${NETWORK}${BOLD}${DGN}APT-Cacher IP Address: ${BGN}${APT_CACHER_IP:-Default}${CL}"
    else
      exit_script
    fi
  fi

  if (whiptail --backtitle "Proxmox VE Helper Scripts" --defaultno --title "IPv6" --yesno "Disable IPv6?" 10 58); then
    DISABLEIP6="yes"
  else
    DISABLEIP6="no"
  fi
  echo -e "${DISABLEIPV6}${BOLD}${DGN}Disable IPv6: ${BGN}$DISABLEIP6${CL}"

  if MTU1=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Set Interface MTU Size (leave blank for default [1500])" 8 58 --title "MTU SIZE" 3>&1 1>&2 2>&3); then
    if [ -z $MTU1 ]; then
      MTU1="Default"
      MTU=""
    else
      MTU=",mtu=$MTU1"
    fi
    echo -e "${DEFAULT}${BOLD}${DGN}Interface MTU Size: ${BGN}$MTU1${CL}"
  else
    exit_script
  fi

  if SD=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Set a DNS Search Domain (leave blank for HOST)" 8 58 --title "DNS Search Domain" 3>&1 1>&2 2>&3); then
    if [ -z $SD ]; then
      SX=Host
      SD=""
    else
      SX=$SD
      SD="-searchdomain=$SD"
    fi
    echo -e "${SEARCH}${BOLD}${DGN}DNS Search Domain: ${BGN}$SX${CL}"
  else
    exit_script
  fi

  if NX=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Set a DNS Server IP (leave blank for HOST)" 8 58 --title "DNS SERVER IP" 3>&1 1>&2 2>&3); then
    if [ -z $NX ]; then
      NX=Host
      NS=""
    else
      NS="-nameserver=$NX"
    fi
    echo -e "${NETWORK}${BOLD}${DGN}DNS Server IP Address: ${BGN}$NX${CL}"
  else
    exit_script
  fi

  if MAC1=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Set a MAC Address(leave blank for generated MAC)" 8 58 --title "MAC ADDRESS" 3>&1 1>&2 2>&3); then
    if [ -z $MAC1 ]; then
      MAC1="Default"
      MAC=""
    else
      MAC=",hwaddr=$MAC1"
      echo -e "${MACADDRESS}${BOLD}${DGN}MAC Address: ${BGN}$MAC1${CL}"
    fi
  else
    exit_script
  fi

  # Check if we have Netbox prefix details and try to get VLAN from prefix
  if [ -n "$NBPREFIX" ] && [ -n "$PREFIX_DETAILS" ]; then
    # Get VLAN information from prefix details
    VLAN_ID=$(echo "$PREFIX_DETAILS" | jq -r '.vlan.id // ""')
    
    if [ -n "$VLAN_ID" ] && [ "$VLAN_ID" != "null" ]; then
      # Get VLAN details
      VLAN_DETAILS=$(curl -s -X GET \
          -H "Authorization: Token $NBTOKEN" \
          -H "Content-Type: application/json" \
          -H "Accept: application/json; indent=4" \
          "$NBADDR/api/ipam/vlans/$VLAN_ID/")
      
      VLAN_VID=$(echo "$VLAN_DETAILS" | jq -r '.vid')
      VLAN_NAME=$(echo "$VLAN_DETAILS" | jq -r '.name')
      
      # Ask user to choose between Netbox VLAN or manual entry
      VLAN_CHOICE=$(whiptail --backtitle "Proxmox VE Helper Scripts" --title "VLAN SELECTION" --menu \
        "Choose VLAN option:" 12 58 2 \
        "netbox" "Use Netbox VLAN: $VLAN_VID ($VLAN_NAME)" \
        "manual" "Enter VLAN manually" \
        3>&1 1>&2 2>&3)
      
      if [ $? -ne 0 ]; then
        exit_script
      fi
      
      if [ "$VLAN_CHOICE" == "netbox" ]; then
        VLAN1=$VLAN_VID
        VLAN=",tag=$VLAN1"
        echo -e "${VLANTAG}${BOLD}${DGN}VLAN: ${BGN}$VLAN1${CL}"
      else
        # Manual VLAN entry
        VLAN1=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Set a VLAN (leave blank for no VLAN)" 8 58 --title "VLAN" 3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
          exit_script
        fi
        
        if [ -z "$VLAN1" ]; then
          VLAN1="Default"
          VLAN=""
        else
          VLAN=",tag=$VLAN1"
        fi
        echo -e "${VLANTAG}${BOLD}${DGN}VLAN: ${BGN}$VLAN1${CL}"
      fi
    else
      # No VLAN in Netbox, ask for manual entry
      VLAN1=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Set a VLAN (leave blank for no VLAN)" 8 58 --title "VLAN" 3>&1 1>&2 2>&3)
      if [ $? -ne 0 ]; then
        exit_script
      fi
      
      if [ -z "$VLAN1" ]; then
        VLAN1="Default"
        VLAN=""
      else
        VLAN=",tag=$VLAN1"
      fi
      echo -e "${VLANTAG}${BOLD}${DGN}VLAN: ${BGN}$VLAN1${CL}"
    fi
  else
    # No Netbox prefix details, ask for manual entry
    VLAN1=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Set a VLAN (leave blank for no VLAN)" 8 58 --title "VLAN" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      exit_script
    fi
    
    if [ -z "$VLAN1" ]; then
      VLAN1="Default"
      VLAN=""
    else
      VLAN=",tag=$VLAN1"
    fi
    echo -e "${VLANTAG}${BOLD}${DGN}VLAN: ${BGN}$VLAN1${CL}"
  fi

  if ADV_TAGS=$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "Set Custom Tags?[If you remove all, there will be no tags!]" 8 58 ${TAGS} --title "Advanced Tags" 3>&1 1>&2 2>&3); then
    if [ -n "${ADV_TAGS}" ]; then
      ADV_TAGS=$(echo "$ADV_TAGS" | tr -d '[:space:]')
      TAGS="${ADV_TAGS}"
    else
      TAGS=";"
    fi
    echo -e "${NETWORK}${BOLD}${DGN}Tags: ${BGN}$TAGS${CL}"
  else
    exit_script
  fi

  if [[ "$PW" == -password* ]]; then
    if (whiptail --backtitle "Proxmox VE Helper Scripts" --defaultno --title "SSH ACCESS" --yesno "Enable Root SSH Access?" 10 58); then
      SSH="yes"
    else
      SSH="no"
    fi
    echo -e "${ROOTSSH}${BOLD}${DGN}Root SSH Access: ${BGN}$SSH${CL}"
  else
    SSH="no"
    echo -e "${ROOTSSH}${BOLD}${DGN}Root SSH Access: ${BGN}$SSH${CL}"
  fi

  if [[ "${SSH}" == "yes" ]]; then
    SSH_AUTHORIZED_KEY="$(whiptail --backtitle "Proxmox VE Helper Scripts" --inputbox "SSH Authorized key for root (leave empty for none)" 8 58 --title "SSH Key" 3>&1 1>&2 2>&3)"

    if [[ -z "${SSH_AUTHORIZED_KEY}" ]]; then
      echo "Warning: No SSH key provided."
    fi
  else
    SSH_AUTHORIZED_KEY=""
  fi
  if (whiptail --backtitle "Proxmox VE Helper Scripts" --defaultno --title "VERBOSE MODE" --yesno "Enable Verbose Mode?" 10 58); then
    VERB="yes"
  else
    VERB="no"
  fi
  echo -e "${SEARCH}${BOLD}${DGN}Verbose Mode: ${BGN}$VERB${CL}"

  if (whiptail --backtitle "Proxmox VE Helper Scripts" --title "ADVANCED SETTINGS COMPLETE" --yesno "Ready to create ${APP} LXC?" 10 58); then
    echo -e "${CREATING}${BOLD}${RD}Creating a ${APP} LXC using the above advanced settings${CL}"
  else
    clear
    header_info
    echo -e "${ADVANCED}${BOLD}${RD}Using Advanced Settings on node $PVEHOST_NAME${CL}"
    advanced_settings
  fi
}
